{"compilerOptions":{"css":"external","dev":true},"configFile":"C:\\Users\\Ola\\Desktop\\Git Repositories\\Bakeboka-Svelte\\svelte.config.js","extensions":[".svelte"],"preprocess":{"script":"async script({ attributes, content, filename = \"\" }) {\r\n      const lang = attributes.lang;\r\n      if (!supportedScriptLangs.includes(lang))\r\n        return;\r\n      const { code, map } = await transformWithEsbuild(content, filename, {\r\n        loader: lang,\r\n        target: \"esnext\",\r\n        tsconfigRaw: {\r\n          compilerOptions: {\r\n            // svelte typescript needs this flag to work with type imports\r\n            importsNotUsedAsValues: \"preserve\",\r\n            preserveValueImports: true\r\n          }\r\n        }\r\n      });\r\n      mapSourcesToRelative(map, filename);\r\n      return {\r\n        code,\r\n        map\r\n      };\r\n    }","style":"async ({ attributes, content, filename = \"\" }) => {\r\n    const lang = attributes.lang;\r\n    if (!supportedStyleLangs.includes(lang))\r\n      return;\r\n    if (!transform) {\r\n      let resolvedConfig;\r\n      if (style.__resolvedConfig) {\r\n        resolvedConfig = style.__resolvedConfig;\r\n      } else if (isResolvedConfig(config)) {\r\n        resolvedConfig = config;\r\n      } else {\r\n        resolvedConfig = await resolveConfig(\r\n          config,\r\n          process.env.NODE_ENV === \"production\" ? \"build\" : \"serve\"\r\n        );\r\n      }\r\n      transform = getCssTransformFn(resolvedConfig);\r\n    }\r\n    const moduleId = `${filename}.${lang}`;\r\n    const { code, map } = await transform(content, moduleId);\r\n    mapSourcesToRelative(map, moduleId);\r\n    return {\r\n      code,\r\n      map: map ?? void 0\r\n    };\r\n  }"}}